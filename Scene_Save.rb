#==============================================================================
# ■ RK::HorrorSave
#------------------------------------------------------------------------------
# 　セーブ＆ロード画面用モジュール
#==============================================================================
module RK
  module HorrorSave
    
    # タイトル名
    TitleSaveName = "SAVE"
    TitleLoadName = "LOAD"
    
    # 背景画像(Graphics/System/)
    Background = "title"

    # 項目の高さ
    ItemHeight = 55
    
    # 項目の色
    Color1 = Color.new(0, 200, 200, 60)
    Color2 = Color.new(0, 160, 0, 96)
    ShadowColor = Color.new(0, 0, 0, 255)

  end
end

#==============================================================================
# ■ Window_File
#------------------------------------------------------------------------------
# 　セーブ画面とロード画面の共通処理を行うクラスです。
#==============================================================================

class Window_File < Window_RK
  #--------------------------------------------------------------------------
  # ● インクルード
  #--------------------------------------------------------------------------
  include RK::HorrorSave
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize(x, y, width, height)
    super(x, y, width, height)
    self.opacity = 0
    activate
  end
  #--------------------------------------------------------------------------
  # ● 桁数の取得
  #--------------------------------------------------------------------------
  def col_max
    return 1
  end
  #--------------------------------------------------------------------------
  # ● 標準パディングサイズの取得
  #--------------------------------------------------------------------------
  def standard_padding
    return 20
  end
  #--------------------------------------------------------------------------
  # ● 項目の高さを取得
  #--------------------------------------------------------------------------
  def item_width
    return contents_width
  end
  #--------------------------------------------------------------------------
  # ● 項目の高さを取得
  #--------------------------------------------------------------------------
  def item_height
    return ItemHeight
  end
  #--------------------------------------------------------------------------
  # ● 横に項目が並ぶときの空白の幅を取得
  #--------------------------------------------------------------------------
  def spacing
    return 3
  end
  #--------------------------------------------------------------------------
  # ● 項目数の取得
  #--------------------------------------------------------------------------
  def item_max
    return 5
  end
  #--------------------------------------------------------------------------
  # ● アイテムリストの作成
  #--------------------------------------------------------------------------
  def make_item_list
    item_max.times {|i| @data.push(i) }
  end
  #--------------------------------------------------------------------------
  # ● プレイ時間の描画
  #--------------------------------------------------------------------------
  def draw_playtime(rect, index)
    header = DataManager.load_header(index)
    return unless header
    change_color(RK::HorrorBase::TextColor, true)
    draw_text(rect, "頭境炭坑団地")
    rect.x += 120
    change_color(normal_color, true)
    draw_text(rect, "PlayTime : " + header[:playtime_s] + "
    Archives : " + $game_variables[RK::HorrorArchives::ArchivesNum].to_s)
  end
  #--------------------------------------------------------------------------
  # ● 背景の描画
  #--------------------------------------------------------------------------
  def draw_background(rect, index)
    rect1 = Rect.new(rect.x, rect.y, 70, rect.height)
    contents.gradient_fill_rect(rect1, Color.new(0,0,0,0), Color.new(0,0,0))
    contents.fill_rect(rect1.x, rect1.y+rect1.height-2, rect1.width, 2, ShadowColor)
    contents.fill_rect(rect1.width-2, rect1.y, 2, rect1.height-2, ShadowColor)
    
    rect2 = Rect.new(rect1.width+3, rect.y, rect.width-rect1.width-3, rect.height)
    contents.gradient_fill_rect(rect2, Color1, Color2)
    contents.fill_rect(rect2.x, rect2.y+rect2.height-2, rect2.width, 2, ShadowColor)
    contents.fill_rect(rect2.x+rect2.width-2, rect2.y, 2, rect2.height-2, ShadowColor)
    
    rect.x += 5
    draw_text(rect, "File "+ (index+1).to_s)
    rect2.x += 10
    draw_playtime(rect2, index)
  end
  #--------------------------------------------------------------------------
  # ● 項目の描画
  #--------------------------------------------------------------------------
  def draw_item(index)
    rect = item_rect(index)
    contents.font.name = "HGS明朝B"
    contents.font.size = 18
    draw_background(rect, index)
  end
  #--------------------------------------------------------------------------
  # ● 前回の選択位置を復帰
  #--------------------------------------------------------------------------
  def first_index
    DataManager.last_savefile_index
  end
end

#==============================================================================
# ■ Scene_File
#------------------------------------------------------------------------------
# 　セーブ画面とロード画面の共通処理を行うクラスです。
#==============================================================================

class Scene_Files < Scene_MenuBase
  #--------------------------------------------------------------------------
  # ● 開始処理
  #--------------------------------------------------------------------------
  def start
    super
    create_background
    create_title_window
    create_help_window
    create_savefile_window
  end
  #--------------------------------------------------------------------------
  # ● 背景の作成
  #--------------------------------------------------------------------------
  def create_background
    @background_sprite = Sprite.new
    @background_sprite.bitmap = Cache.system( RK::HorrorSave::Background )
  end
  #--------------------------------------------------------------------------
  # ● 背景の解放
  #--------------------------------------------------------------------------
  def dispose_background
    @background_sprite.dispose
  end
  #--------------------------------------------------------------------------
  # ● タイトルウィンドウの作成
  #--------------------------------------------------------------------------
  def create_title_window
  end
  #--------------------------------------------------------------------------
  # ● ヘルプウィンドウの作成
  #--------------------------------------------------------------------------
  def create_help_window
  end
  #--------------------------------------------------------------------------
  # ● アイテムリストの作成
  #-------------------------------------------------------------------------
  def create_savefile_window
    wy = @title_window.height + @help_window.height
    wh = Graphics.height - wy
    @savefile_window = Window_File.new(0, wy, Graphics.width, wh)
    @savefile_window.viewport = @viewport
    @savefile_window.set_handler(:ok, method(:on_savefile_ok))
    @savefile_window.set_handler(:cancel, method(:return_scene))
  end
  #--------------------------------------------------------------------------
  # ● セーブファイルの決定
  #--------------------------------------------------------------------------
  def on_savefile_ok
  end
end

#==============================================================================
# ■ Scene_Save
#------------------------------------------------------------------------------
# 　セーブ画面の処理を行うクラスです。
#==============================================================================

class Scene_Saves < Scene_Files
  #--------------------------------------------------------------------------
  # ● タイトルウィンドウの作成
  #--------------------------------------------------------------------------
  def create_title_window
    @title_window = Window_Title.new
    @title_window.set_text( RK::HorrorSave::TitleSaveName )
  end
  #--------------------------------------------------------------------------
  # ● ヘルプウィンドウの作成
  #--------------------------------------------------------------------------
  def create_help_window
    @help_window = Window_Description.new(@title_window.height)
    @help_window.set_text("セーブする場所を選んでください")
  end
  #--------------------------------------------------------------------------
  # ● セーブファイルの決定
  #--------------------------------------------------------------------------
  def on_savefile_ok
    super
    if DataManager.save_game(@savefile_window.index)
      on_save_success
    else
      Sound.play_buzzer
    end
  end
  #--------------------------------------------------------------------------
  # ● セーブ成功時の処理
  #--------------------------------------------------------------------------
  def on_save_success
    Sound.play_save
    return_scene
  end
end

#==============================================================================
# ■ Scene_Load
#------------------------------------------------------------------------------
# 　ロード画面の処理を行うクラスです。
#==============================================================================

class Scene_Loads < Scene_Files
  #--------------------------------------------------------------------------
  # ● タイトルウィンドウの作成
  #--------------------------------------------------------------------------
  def create_title_window
    @title_window = Window_Title.new
    @title_window.set_text( RK::HorrorSave::TitleLoadName )
  end
  #--------------------------------------------------------------------------
  # ● ヘルプウィンドウの作成
  #--------------------------------------------------------------------------
  def create_help_window
    @help_window = Window_Description.new(@title_window.height)
    @help_window.set_text("ロードする場所を選んでください")
  end
  #--------------------------------------------------------------------------
  # ● ロードファイルの決定
  #--------------------------------------------------------------------------
  def on_savefile_ok
    super
    if DataManager.load_game(@savefile_window.index)
      on_load_success
    else
      Sound.play_buzzer
    end
  end
  #--------------------------------------------------------------------------
  # ● ロード成功時の処理
  #--------------------------------------------------------------------------
  def on_load_success
    Sound.play_load
    fadeout_all
    $game_system.on_after_load
    SceneManager.goto(Scene_Map)
  end
end

